from "base/iostream-clifwrap.h" import *
from "cudamatrix/cu-vector-clifwrap.h" import *
from "cudamatrix/cu-matrix-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "nnet3/nnet-common-clifwrap.h" import *
from "nnet3/nnet-parse-clifwrap.h" import *
from "nnet3/nnet-computation-graph-ext-clifwrap.h" import *
from "nnet3/nnet-misc-computation-info-clifwrap.h" import *

from "nnet3/nnet-component-itf.h":
  capsule `void` as Void

  namespace `kaldi::nnet3`:

    enum ComponentProperties with:
      `kSimpleComponent` as SIMPLE_COMPONENT
      `kUpdatableComponent` as UPDATABLE_COMPONENT
      `kPropagateInPlace` as PROPAGATE_IN_PLACE
      `kPropagateAdds` as PROPAGATE_ADDS
      `kReordersIndexes` as REORDERS_INDEXES
      `kBackpropAdds` as BACKPROP_ADDS
      `kBackpropNeedsInput` as BACKPROP_NEEDS_INPUT
      `kBackpropNeedsOutput` as BACKPROP_NEEDS_OUTPUT
      `kBackpropInPlace` as BACKPROP_IN_PLACE
      `kStoresStats` as STORES_STATS
      `kInputContiguous` as INPUT_CONTIGUOUS
      `kOutputContiguous` as OUTPUT_CONTIGUOUS
      `kUsesMemo` as USES_MEMO
      `kRandomComponent` as RANDOM_COMPONENT

    class ComponentPrecomputedIndexes:
      @classmethod
      def `ReadNew` as read_new(cls, is: istream, binary: bool)
        -> ComponentPrecomputedIndexes

      @classmethod
      def `NewComponentPrecomputedIndexesOfType`
          as new_component_precomputed_indexes_of_type(cls, cpi_type: str)
        -> ComponentPrecomputedIndexes

    class Component:
      def `StoreStats` as store_stats(self, in_value: CuMatrixBase,
                                      out_value: CuMatrixBase, memo: Void)

      def `ZeroStats` as zero_stats(self)

      def `GetInputIndexes` as get_input_indexes(self,
          misc_info: MiscComputationInfo, output_index: Index) -> list<Index>

      def `IsComputable` as is_computable(self, misc_info: MiscComputationInfo,
                                          output_index: Index, input_index_set: IndexSet)
          -> (ret: bool, used_inputs: list<Index>)

      # FIXME: This won't work as it is since output_indexes is input/output.
      # def ReorderIndexes(self, input_indexes: list<Index>,
      #                    output_indexes: list<Index>)

      def `PrecomputeIndexes` as precompute_indexes(self,
          misc_info: MiscComputationInfo, input_indexes: list<Index>,
          output_indexes: list<Index>, need_backprop: bool) -> ComponentPrecomputedIndexes

      @classmethod
      def `ReadNew` as read_new(cls, is: istream, binary: bool) -> Component

      @classmethod
      def `NewComponentOfType` as new_component_of_type(cls, type: str) -> Component

      def `Info` as info(self) -> str

      def `Scale` as scale(self, scale: float)

      def `Add` as add(self, alpha: float, other: Component)

      def `DeleteMemo` as delete_memo(self, memo: Void)


    class RandomComponent(Component):
      def `ResetGenerator` as reset_generator(self)

      def `SetTestMode` as set_test_mode(self, test_mode: bool)


    class UpdatableComponent(Component):
      def `SetUnderlyingLearningRate` as set_underlying_learning_rate(self, lrate: float)

      def `SetActualLearningRate` as set_actual_learning_rate(self, lrate: float)

      def `SetAsGradient` as set_as_gradient(self)

      def `LearningRateFactor` as learning_rate_factor(self) -> float

      def `SetLearningRateFactor` as set_learning_rate_factor(self, lrate_factor: float)

      def `SetUpdatableConfigs` as set_updatable_configs(self, other: UpdatableComponent)

      def `FreezeNaturalGradient` as freeze_natural_gradient(self, freeze: bool)

      def `LearningRate` as learning_rate(self) -> float

      def `MaxChange` as max_change(self) -> float

      def `SetMaxChange` as set_max_change(self, max_change: float)

      def `L2Regularization` as l2_regularization(self) -> float

      def `SetL2Regularization` as set_l2_regularization(self, a: float)

      def `Info` as info(self) -> str

      def `NumParameters` as num_parameters(self) -> int

      def `Vectorize` as vectorize(self, params: VectorBase)

      def `UnVectorize` as unvectorize(self, params: VectorBase)


    class NonlinearComponent(Component):
      def `InputDim` as input_dim(self) -> int

      def `OutputDim` as output_dim(self) -> int

      def `InitFromConfig` as init_from_config(self, cfl: ConfigLine)

      def `Read` as read(self, is: istream, binary: bool)

      def `ZeroStats` as zero_stats(self)

      def `Info` as info(self) -> str

      def `Write` as write(self, os: ostream, binary: bool)

      def `Scale` as scale(self, scale: float)

      def `Add` as add(self, alpha: float, other: Component)

      def ValueSum(self) -> CuDoubleVector

      def DerivSum(self) -> CuDoubleVector

      def `Count` as count(self) -> float
