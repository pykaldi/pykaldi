from "base/iostream-clifwrap.h" import *
from "cudamatrix/cu-matrixdim-clifwrap.h" import *
from "cudamatrix/cu-array-clifwrap.h" import *
from "cudamatrix/cu-vector-clifwrap.h" import *
from "cudamatrix/cu-matrix-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "nnet3/nnet-common-clifwrap.h" import *
from "nnet3/nnet-parse-clifwrap.h" import *
from "nnet3/nnet-computation-graph-ext-clifwrap.h" import *
from "nnet3/nnet-misc-computation-info-clifwrap.h" import *
from "nnet3/nnet-component-itf-clifwrap.h" import *

from kaldi.nnet3._nnet_component_itf import Component
from kaldi.nnet3._nnet_component_itf import RandomComponent
from kaldi.nnet3._nnet_component_itf import UpdatableComponent
from kaldi.nnet3._nnet_component_itf import ComponentPrecomputedIndexes

from "nnet3/nnet-general-component.h":
  namespace `kaldi::nnet3`:
    class DistributeComponent(Component):
      @add__init__
      def `DistributeComponent` as from_dims(self, input_dim: int, output_dim: int)

      def `InputDim` as input_dim(self) -> int

      def `OutputDim` as output_dim(self) -> int

      def `InitFromConfig` as init_from_config(self, cfl: ConfigLine)

      def `Type` as type(self) -> str

      def `Properties` as properties(self) -> int

      def `Propagate` as propagate(self, indexes: ComponentPrecomputedIndexes,
                    in: CuMatrixBase, out: CuMatrixBase) -> Void

      def `Backprop` as backprop(self,
          debug_info: str, indexes: ComponentPrecomputedIndexes,
          in_value: CuMatrixBase, out_value: CuMatrixBase, out_deriv: CuMatrixBase,
          memo: Void, to_update: Component, in_deriv: CuMatrixBase)

      def `Read` as read(self, is: istream, binary: bool)

      def `Write` as write(self, os: ostream, binary: bool)

      def `Copy` as copy(self) -> Component

      def `GetInputIndexes` as get_input_indexes(self,
          misc_info: MiscComputationInfo, output_index: Index) -> list<Index>

      def `IsComputable` as is_computable(self, misc_info: MiscComputationInfo,
                                          output_index: Index, input_index_set: IndexSet)
          -> (ret: bool, used_inputs: list<Index>)

      def `PrecomputeIndexes` as precompute_indexes(self,
          misc_info: MiscComputationInfo, input_indexes: list<Index>,
          output_indexes: list<Index>, need_backprop: bool) -> ComponentPrecomputedIndexes

      def `Init` as init(self, input_dim: int, output_dim: int)


    class DistributeComponentPrecomputedIndexes(ComponentPrecomputedIndexes):
      pairs: list<tuple<int, int>>

      def `Copy` as copy(self) -> ComponentPrecomputedIndexes

      def `Write` as write(self, os: ostream, binary: bool)

      def `Read` as read(self, is: istream, binary: bool)

      def `Type` as type(self) -> str


    class StatisticsExtractionComponent(Component):
      @add__init__
      def `StatisticsExtractionComponent` as from_other(self, other: StatisticsExtractionComponent)

      def `InputDim` as input_dim(self) -> int

      def `OutputDim` as output_dim(self) -> int

      def `InitFromConfig` as init_from_config(self, cfl: ConfigLine)

      def `Type` as type(self) -> str

      def `Properties` as properties(self) -> int

      def `Propagate` as propagate(self, indexes: ComponentPrecomputedIndexes,
                    in: CuMatrixBase, out: CuMatrixBase) -> Void

      def `Backprop` as backprop(self,
          debug_info: str, indexes: ComponentPrecomputedIndexes,
          in_value: CuMatrixBase, out_value: CuMatrixBase, out_deriv: CuMatrixBase,
          memo: Void, to_update: Component, in_deriv: CuMatrixBase)

      def `Read` as read(self, is: istream, binary: bool)

      def `Write` as write(self, os: ostream, binary: bool)

      def `Copy` as copy(self) -> Component

      def `GetInputIndexes` as get_input_indexes(self,
          misc_info: MiscComputationInfo, output_index: Index) -> list<Index>

      def `IsComputable` as is_computable(self, misc_info: MiscComputationInfo,
                                          output_index: Index, input_index_set: IndexSet)
          -> (ret: bool, used_inputs: list<Index>)

      # FIXME: This won't work as it is since output_indexes is input/output.
      # def ReorderIndexes(self, input_indexes: list<Index>,
      #                    output_indexes: list<Index>)

      def `PrecomputeIndexes` as precompute_indexes(self,
          misc_info: MiscComputationInfo, input_indexes: list<Index>,
          output_indexes: list<Index>, need_backprop: bool) -> ComponentPrecomputedIndexes


    class StatisticsExtractionComponentPrecomputedIndexes(ComponentPrecomputedIndexes):
      forward_indexes: CuIntPairArray
      counts: CuVector
      backward_indexes: CuArray

      def `Copy` as copy(self) -> ComponentPrecomputedIndexes

      def `Write` as write(self, os: ostream, binary: bool)

      def `Read` as read(self, is: istream, binary: bool)

      def `Type` as type(self) -> str


    class StatisticsPoolingComponent(Component):
      @add__init__
      def `StatisticsPoolingComponent` as from_other(
          self, other: StatisticsPoolingComponent)

      def `InputDim` as input_dim(self) -> int

      def `OutputDim` as output_dim(self) -> int

      def `InitFromConfig` as init_from_config(self, cfl: ConfigLine)

      def `Type` as type(self) -> str

      def `Properties` as properties(self) -> int

      def `Propagate` as propagate(self, indexes: ComponentPrecomputedIndexes,
                    in: CuMatrixBase, out: CuMatrixBase) -> Void

      def `Backprop` as backprop(self,
          debug_info: str, indexes: ComponentPrecomputedIndexes,
          in_value: CuMatrixBase, out_value: CuMatrixBase, out_deriv: CuMatrixBase,
          memo: Void, to_update: Component, in_deriv: CuMatrixBase)

      def `Read` as read(self, is: istream, binary: bool)

      def `Write` as write(self, os: ostream, binary: bool)

      def `Copy` as copy(self) -> Component

      def `GetInputIndexes` as get_input_indexes(self,
          misc_info: MiscComputationInfo, output_index: Index) -> list<Index>

      def `IsComputable` as is_computable(self, misc_info: MiscComputationInfo,
                                          output_index: Index, input_index_set: IndexSet)
          -> (ret: bool, used_inputs: list<Index>)

      # FIXME: This won't work as it is since output_indexes is input/output.
      # def ReorderIndexes(self, input_indexes: list<Index>,
      #                    output_indexes: list<Index>)

      def `PrecomputeIndexes` as precompute_indexes(self,
          misc_info: MiscComputationInfo, input_indexes: list<Index>,
          output_indexes: list<Index>, need_backprop: bool) -> ComponentPrecomputedIndexes


    class StatisticsPoolingComponentPrecomputedIndexes(ComponentPrecomputedIndexes):
      forward_indexes: CuIntPairArray
      backward_indexes: CuIntPairArray

      def `Copy` as copy(self) -> ComponentPrecomputedIndexes

      def `Write` as write(self, os: ostream, binary: bool)

      def `Read` as read(self, is: istream, binary: bool)

      def `Type` as type(self) -> str


    class BackpropTruncationComponent(Component):
      @add__init__
      def `BackpropTruncationComponent` as from_args(
          self, dim: int, scale: float, clipping_threshold: float,
          zeroing_threshold: float, zeroing_interval: int,
          recurrence_interval: int)

      def `InputDim` as input_dim(self) -> int

      def `OutputDim` as output_dim(self) -> int

      def `InitFromConfig` as init_from_config(self, cfl: ConfigLine)

      def `Init` as init(self, dim: int, scale: float, clipping_threshold: float,
                         zeroing_threshold: float, zeroing_interval: int,
                         recurrence_interval: int)

      def `Type` as type(self) -> str

      def `Properties` as properties(self) -> int

      def `ZeroStats` as zero_stats(self)

      def `Copy` as copy(self) -> Component

      def `Propagate` as propagate(self, indexes: ComponentPrecomputedIndexes,
                    in: CuMatrixBase, out: CuMatrixBase) -> Void

      def `Backprop` as backprop(self,
          debug_info: str, indexes: ComponentPrecomputedIndexes,
          in_value: CuMatrixBase, out_value: CuMatrixBase, out_deriv: CuMatrixBase,
          memo: Void, to_update: Component, in_deriv: CuMatrixBase)

      def `PrecomputeIndexes` as precompute_indexes(self,
          misc_info: MiscComputationInfo, input_indexes: list<Index>,
          output_indexes: list<Index>, need_backprop: bool) -> ComponentPrecomputedIndexes

      def `Scale` as scale(self, scale: float)

      def `Add` as add(self, alpha: float, other: Component)

      def `Read` as read(self, is: istream, binary: bool)

      def `Write` as write(self, os: ostream, binary: bool)

      def `Info` as info(self) -> str


    class BackpropTruncationComponentPrecomputedIndexes(ComponentPrecomputedIndexes):
      zeroing: CuVector
      zeroing_sum: float

      def `Copy` as copy(self) -> ComponentPrecomputedIndexes

      def `Write` as write(self, os: ostream, binary: bool)

      def `Read` as read(self, is: istream, binary: bool)

      def `Type` as type(self) -> str


    class ConstantComponent(UpdatableComponent):
      @add__init__
      def `ConstantComponent` as from_other(self, other: ConstantComponent)

      def `InputDim` as input_dim(self) -> int

      def `OutputDim` as output_dim(self) -> int

      def `Info` as info(self) -> str

      def `InitFromConfig` as init_from_config(self, cfl: ConfigLine)

      def `Type` as type(self) -> str

      def `Properties` as properties(self) -> int

      def `Propagate` as propagate(self, indexes: ComponentPrecomputedIndexes,
                    in: CuMatrixBase, out: CuMatrixBase) -> Void

      def `Backprop` as backprop(self,
          debug_info: str, indexes: ComponentPrecomputedIndexes,
          in_value: CuMatrixBase, out_value: CuMatrixBase, out_deriv: CuMatrixBase,
          memo: Void, to_update: Component, in_deriv: CuMatrixBase)

      def `Read` as read(self, is: istream, binary: bool)

      def `Write` as write(self, os: ostream, binary: bool)

      def `Copy` as copy(self) -> Component

      def `GetInputIndexes` as get_input_indexes(self,
          misc_info: MiscComputationInfo, output_index: Index) -> list<Index>

      def `IsComputable` as is_computable(self, misc_info: MiscComputationInfo,
                                          output_index: Index, input_index_set: IndexSet)
          -> (ret: bool, used_inputs: list<Index>)

      def `Scale` as scale(self, scale: float)

      def `Add` as add(self, alpha: float, other: Component)

      def `PerturbParams` as perturb_params(self, stddev: float)

      def `DotProduct` as dot_product(self, other: UpdatableComponent) -> float

      def `NumParameters` as num_parameters(self) -> int

      def `Vectorize` as vectorize(self, params: VectorBase)

      def `UnVectorize` as unvectorize(self, params: VectorBase)


    class DropoutMaskComponent(RandomComponent):
      @add__init__
      def `DropoutMaskComponent` as from_other(self, other: DropoutMaskComponent)

      def `InputDim` as input_dim(self) -> int

      def `OutputDim` as output_dim(self) -> int

      def `Info` as info(self) -> str

      def `InitFromConfig` as init_from_config(self, cfl: ConfigLine)

      def `Type` as type(self) -> str

      def `Properties` as properties(self) -> int

      def `Propagate` as propagate(self, indexes: ComponentPrecomputedIndexes,
                    in: CuMatrixBase, out: CuMatrixBase) -> Void

      def `Backprop` as backprop(self,
          debug_info: str, indexes: ComponentPrecomputedIndexes,
          in_value: CuMatrixBase, out_value: CuMatrixBase, out_deriv: CuMatrixBase,
          memo: Void, to_update: Component, in_deriv: CuMatrixBase)

      def `Read` as read(self, is: istream, binary: bool)

      def `Write` as write(self, os: ostream, binary: bool)

      def `Copy` as copy(self) -> Component

      def `GetInputIndexes` as get_input_indexes(self,
          misc_info: MiscComputationInfo, output_index: Index) -> list<Index>

      def `IsComputable` as is_computable(self, misc_info: MiscComputationInfo,
                                          output_index: Index, input_index_set: IndexSet)
          -> (ret: bool, used_inputs: list<Index>)

      def `SetDropoutProportion` as set_dropout_proportion(self, p: float)


    class GeneralDropoutComponent(RandomComponent):
      @add__init__
      def `GeneralDropoutComponent` as new_from_other(self,
                                                      other: GeneralDropoutComponent)

      def `InputDim` as input_dim(self) -> int

      def `OutputDim` as output_dim(self) -> int

      def `Info` as info(self) -> str

      def `InitFromConfig` as init_from_config(self, cfl: ConfigLine)

      def `Type` as type(self) -> str

      def `Properties` as properties(self) -> int

      def `Propagate` as propagate(self, indexes: ComponentPrecomputedIndexes,
                    in: CuMatrixBase, out: CuMatrixBase) -> Void

      def `Backprop` as backprop(self,
          debug_info: str, indexes: ComponentPrecomputedIndexes,
          in_value: CuMatrixBase, out_value: CuMatrixBase, out_deriv: CuMatrixBase,
          memo: Void, to_update: Component, in_deriv: CuMatrixBase)

      def `DeleteMemo` as delete_memo(self, memo: Void)

      def `PrecomputeIndexes` as precompute_indexes(self,
          misc_info: MiscComputationInfo, input_indexes: list<Index>,
          output_indexes: list<Index>, need_backprop: bool) -> ComponentPrecomputedIndexes

      def `Read` as read(self, is: istream, binary: bool)

      def `Write` as write(self, os: ostream, binary: bool)

      def `Copy` as copy(self) -> Component

      def `SetDropoutProportion` as set_dropout_proportion(self, p: float)


    class GeneralDropoutComponentPrecomputedIndexes(ComponentPrecomputedIndexes):
      num_mask_rows: int
      indexes: CuArray

      def `Copy` as copy(self) -> ComponentPrecomputedIndexes

      def `Write` as write(self, os: ostream, binary: bool)

      def `Read` as read(self, is: istream, binary: bool)

      def `Type` as type(self) -> str
