from "itf/online-feature-itf-clifwrap.h" import *
from "hmm/transition-model-clifwrap.h" import *
from "nnet3/decodable-simple-looped-clifwrap.h" import *

from kaldi.itf._decodable_itf import DecodableInterface

from "nnet3/decodable-online-looped.h":
  namespace `kaldi::nnet3`:
    class DecodableNnetLoopedOnline(DecodableInterface):
      """DecodableNnetLoopedOnline"""
      def __init__(self, info: DecodableNnetSimpleLoopedInfo,
                   input_features: OnlineFeatureInterface,
                   ivector_features: OnlineFeatureInterface)

      def `LogLikelihood` as log_likelihood(self, frame: int, index: int) -> float:
        """Returns the log-likehood of the given index for the given frame."""

      def `IsLastFrame` as is_last_frame(self, frame: int) -> bool:
        """Checks if given frame is the last frame."""

      def `NumFramesReady` as num_frames_ready(self) -> int:
        """Returns number of frames ready for decoding."""

      def `NumIndices` as num_indices(self) -> int:
        """Returns number of indices."""

      def `FrameSubsamplingFactor` as frame_subsampling_factor(self) -> int:
        """Returns the frame subsampling factor."""

    class DecodableAmNnetLoopedOnline(DecodableInterface):
      """DecodableAmNnetLoopedOnline"""
      def __init__(self, trans_model: TransitionModel,
                   info: DecodableNnetSimpleLoopedInfo,
                   input_features: OnlineFeatureInterface,
                   ivector_features: OnlineFeatureInterface)

      def `LogLikelihood` as log_likelihood(self, frame: int, index: int) -> float:
        """Returns the log-likehood of the given index for the given frame."""

      def `IsLastFrame` as is_last_frame(self, frame: int) -> bool:
        """Checks if given frame is the last frame."""

      def `NumFramesReady` as num_frames_ready(self) -> int:
        """Returns number of frames ready for decoding."""

      def `NumIndices` as num_indices(self) -> int:
        """Returns number of indices."""

      def `FrameSubsamplingFactor` as frame_subsampling_factor(self) -> int:
        """Returns the frame subsampling factor."""
