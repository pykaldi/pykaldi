from "base/iostream-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/matrix-ext.h" import *
from "itf/clusterable-itf-clifwrap.h" import *

from kaldi.itf._clusterable_itf import Clusterable

from "tree/clusterable-classes.h":
  namespace `kaldi`:
    class ScalarClusterable(Clusterable):
      @add__init__
      def `ScalarClusterable` as new_with_scalar(self, x: float)

      def `Info` as info(self) -> str

      def `Mean` as mean(self) -> float

      def `Copy` as copy(self) -> Clusterable

      def `Objf` as objf(self) -> float

      def `Normalizer` as normalizer(self) -> float

      def `SetZero` as set_zero(self)

      def `Add` as add(self, other: Clusterable)

      def `Sub` as sub(self, other: Clusterable)

      def `Scale` as scale(self, f: float)

      def `Type` as type(self) -> str

      def `Write` as write(self, os: ostream, binary: bool)

      def `ReadNew` as read_new(self, is: istream, binary: bool) -> Clusterable

      def `ObjfPlus` as objf_plus(self, other: Clusterable) -> float

      def `ObjfMinus` as objf_minus(self, other: Clusterable) -> float

      def `Distance` as distance(self, other: Clusterable) -> float

    class GaussClusterable(Clusterable):
      @add__init__
      def `GaussClusterable` as new_with_dim(self, dim: int, var_floor: float)


      @add__init__
      def `GaussClusterable` as new_with_stats(self,
          x_stats: Vector, x2_stats: Vector, var_floor: float, count: float)

      def `AddStats` as add_stats(self, vec: VectorBase,
                                  weight: float = default)

      def count(self) -> float

      def x_stats(self) -> DoubleSubVector

      def x2_stats(self) -> DoubleSubVector

      def `Copy` as copy(self) -> Clusterable

      def `Objf` as objf(self) -> float

      def `Normalizer` as normalizer(self) -> float

      def `SetZero` as set_zero(self)

      def `Add` as add(self, other: Clusterable)

      def `Sub` as sub(self, other: Clusterable)

      def `Scale` as scale(self, f: float)

      def `Type` as type(self) -> str

      def `Write` as write(self, os: ostream, binary: bool)

      def `ReadNew` as read_new(self, is: istream, binary: bool) -> Clusterable

      def `ObjfPlus` as objf_plus(self, other: Clusterable) -> float

      def `ObjfMinus` as objf_minus(self, other: Clusterable) -> float

      def `Distance` as distance(self, other: Clusterable) -> float

    class VectorClusterable(Clusterable):
      @add__init__
      def `VectorClusterable` as new_with_vector(self, vector: Vector,
                                                 weight: float)

      def `Copy` as copy(self) -> Clusterable

      def `Objf` as objf(self) -> float

      def `Normalizer` as normalizer(self) -> float

      def `SetZero` as set_zero(self)

      def `Add` as add(self, other: Clusterable)

      def `Sub` as sub(self, other: Clusterable)

      def `Scale` as scale(self, f: float)

      def `Type` as type(self) -> str

      def `Write` as write(self, os: ostream, binary: bool)

      def `ReadNew` as read_new(self, is: istream, binary: bool) -> Clusterable

      def `ObjfPlus` as objf_plus(self, other: Clusterable) -> float

      def `ObjfMinus` as objf_minus(self, other: Clusterable) -> float

      def `Distance` as distance(self, other: Clusterable) -> float
